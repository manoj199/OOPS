11.35 AM
Continuing with Pluralsight OOP course

To summarize when defining a property, you need to define a variable to store the value, which is the backing field, and you need to define the C# property with get accessor and/or set accessor. In many cases you will find that you dont need code in the getter or setter. when that is the case you can short cut the proerty syntax using something called auto-implemented properties.
-Notice that how shorter the syntax is compared to than the entire block required for the last name. Behind the scene the code is still creating a backing field so you still have that encapsulaton, you just dont have to manage that backing field. That backing field is managed for you so you get the benefits of encapsulation without the code bloat, but this is only for those cases where you dont need an code in the get or set block. The general rule
-The general rule of thumb, if you don't need any logic within the getter or setter, use an auto-implemented property. Otherwise use the full property syntax, with the backing field.
-Snippets: Visual studio provides snippets which are shortcuts for typing C# syntax.
-Even though the specification didt call for it, we know that we need unique identifier for customer.So let's add a customer ID. 
-For CustomerId we want to allow for retriving the ID but never setting it. The database is going to set the ID and return it to us so we could use the prop snippet like we just did, or instead, use propg: defines a property that has a getter and private setter
-So instead of removing the setter that even the code in our class could't even set it, we could instead use the private access modifer on the set to define that we can set this property, but any code external to this class cannot.
-The original specification called for a name property  in the form last name, first name. So let's add a full name property that will return the format requested by the specification.Notice that in this case there is no backing field because it does not require storage of any data. It's using the backing fields already defined fo last name and first name. Also notice that this one has a getter, but no setter. No other code, not even our code in this class should be able to change this value. Now that we have our first set of logic in our application, let's write our first automated code test.

##Testing the Class
-Since we are building our business layer independent from any user interface at this point, how are we going to test it? We can't run a dll component. The best way to test the code is to write an automated code test. An automated code test is another piece of code whose sole purpose is to test a particular piece of our code. The automated code test is a separate project.
-In order to test the business logic, the automated code test project must have a reference to the business logic component. The automated code test can then create an instance of the class from the business logic layer. It can use that instance to access properties or methods of the class.
- Would like to put my automated code test in a separate folder.
-Normally name the tsest project same as the component name it it testing with the test suffix. So in this case it's going to be ACM.BLTest and that creates
-In order to test the business component it needs to have a reference.
- Rename the UnitTest1.cs with the class that we are testing.. Gonna rename the class with CustomerTest.cs

##Working with the objects
- An object is created using the new keyword followed by the type of the object to create and parenthesis. this creates a new instance from the customer class. You can assign the resulting object to an object variable. The type of the object variable is the type of the created object. The object variable then holds reference to the object, that is a reference to the newly created instance. When defining local object variables, instead of declaring the specfic type, you can use the var keyword. Var defines an implicitly typed local variable. An implicitly typed local variable is strongly typed, just as if you have decalred it with the appropriate type. Using var simply shortens the syntax and can make the code easier to read in cases where the type is obvious. Here we are obviously creating an object of type customer. 
- Once we have an object variable we can use the object variable to access the property of the class.
- We used the full property syntax for the last name property and auto-implemented properties for the first name, email address, and customer ID. For full name we defined a read-only property by defining a getter with no setter.

- Objects are reference types, variables of the reference types stores references to their data.Variables of value types such as integers store their data directly.

## Static Modifier
- the static modifier declares a memeber that belongs to the class itself instead of to an object. It is accessed using an class name and not the object variable.That might make more sense in an example.

##Summary
Most applications today are divided into at three layers. 1) User interface for the forms and pages displayed to user, 2)Business logic for the business operations, and data access for retrieving and storing data. Many applications also have a 4) common layer for common code useful throughout the application. This can include code for logging, sending an email, and other common tasks. The classes 
-The classes we identified are for the business logic, so we created a business logic component. In Visual Studio, we created a soultion for the application and project for the business logic layer component.
-We then built the customer component class. Just like an integer is a type and a string is a type, each class define a type. By default, new classes added to a project have no access modifier. If you want to access the class from other components, the access modifier must be set to be public.
-We added properties to the class. we add last name property the long way, we defined the backing field with a private access modifier to encapsulate the actual data and then we added a C# property with accessor to provide  public access to that data. Then we used auto-implemented properties to add the remaining properties. Auto-implemented proprties create and manage the backing field for you and can be used when the property setter and getter don't need to contain any logic.
-We then set up our test using an arrange, act,assert style. The arrange section set up the test, the act contained the code we were testing, and the assert verfied the result of the test. We then ran the test to validate that our code was correct. 
-The Static modifier declaers member that belongs to the type itself instead to an object of the class. so it is accessed using the type name an not an object variable.


## Notes - Other
1) List<T> class represents the list of objects which can be accessed by index. It comes under the System.Collection.Generic namespace.









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































 