2:37 PM
Continuing with OOP in C# from Pluralsight

Today we are going to build classes identified in the prior module.These are the classes that we have identified so far in this course. Customer, product, order, order item. This module provides step by step demonstrations showing you how to create and test one of these entity classes.The other classes are then created using the same technique, but before we build the classes, we need to layout the structure of the application.

##Layering the application
- Every application has some basic structure. Most applications today are built with layered structure. Though not specifically an OOP concept, layering is key to defining the structure of any application.That structure is then defined in Visual Studio using a solution for the application and a project for each layer.Most applications are minimally divided into three layer. 
= The user interface layer is where you create the forms or pages that are displayed to the user. It includes any logic to control and populate the user interface elements.
= Then there is the business logic layer where the majority of the application logic resides. This includes the logic to perform the business operations. The design we defined so far in this course will be implemented in the business logic layer. And finally, 
= There is a data access layer. The data access layers contains the code to retrieve data from the databases or other datastore and save back to the database or other datastore. Some applications have additional layers depending on the complexity and design of the application.
== Many applications include a common layer for common code useful throughout the application and maybe throught multiple applications.The common code can include code for features such as logging or sending an email. Each of the layers of the application is defined as a separate project within a Visual Studio solution. When the code in the each project is built the Visual studio creats an appropriate component.The user interface project might compile to an exe. For the business logic layer, the resulting component is a dll and so on. Dividing an application into layers makes it easier to work with each layer. It also follows the principle of encapsulation, with the UI code and the UI layer, the business logic with business logic layer, and so on. Layering the application also makes it easier to extend the application. By having the business logic seperate from the UI, you could add a web user interface onto a desktop application without re-working or rewriting any of the businees logic.


##Building the business logic layer component

- The classes we have identified so far contain the data and processing required for the business logic. Therefore they reside in the business layer so we will create the business layer project first. Well start by creating a new project.Since we are building a project for business logic, we want the template for class library

- Now that we have businees layer project defined we can add the entity classes to that project. Let's start with customer class.

- Next we need to make sure that class has public accessibility so our access modifier here is public. When you create a new class, it defaults to no access modifier so you'll need to ensure that it is defined to be public. Giving a class public accessibility the class is callable from any other project within the solution an by any external component. We want other components to use these entity classes so we want this class to have public accessibility.Note that each class you define is a type. Just like strings are types integers are types your classes are also types. Now let's add properties to the customer class.

- Recall from the last module, a class should encapsulate it's data. That means that actual data is hidden within the class and access to that data is provided with accessors. In code the data is hidden by defining a private backing field.This field stores the actual data and it uses a private access modifer to ensure that no code outside of this class can access it. The data is accessable to other parts of the application through a C# property. A property inculdes a get and set accessors. A property is often defined with a public access modifier, meaning any code can use it get or set the data. If you want the property to be accessed within the current component,meaning our business logic layer, you can use the internal access modifier instead.Internal means that access is limited to code internal to the component in which it is defined.So in this case, any code within the businees layer could access the property, but code in any other component such as the user interface layer, could not access the property. In this case we want to allow access to the last name from any component so we're going to make it public. As it's name implies, the get accessor portion of the property is accessed when the code gets or references the property.In this example, the code just retirves the value from the backing field and returns it. You can add code in the get accessor to perform any operations prior to returning the value.You can write the code to verify that the user can access this data or code to reformat or convert this data.The set accessor portion of the property is accessed when the code assigns a value to the property. In this example, the code simply assigns the value to the backing field.You can add code in the set accessor to perform any operation prior to assigning the value.You can add code to validate the value before assigning it, or you can write code to reformat or convert the data. 


	